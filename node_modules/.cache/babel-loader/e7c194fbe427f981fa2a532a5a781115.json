{"ast":null,"code":"import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nimport { isTensor3D } from '../utils';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractPointwiseConvParams(prefix, idx, mappedPrefix) {\n    var filters = extractWeightEntry(prefix + \"/Conv2d_\" + idx + \"_pointwise/weights\", 4, mappedPrefix + \"/filters\");\n    var batch_norm_offset = extractWeightEntry(prefix + \"/Conv2d_\" + idx + \"_pointwise/convolution_bn_offset\", 1, mappedPrefix + \"/batch_norm_offset\");\n    return {\n      filters: filters,\n      batch_norm_offset: batch_norm_offset\n    };\n  }\n\n  function extractConvPairParams(idx) {\n    var mappedPrefix = \"mobilenetv1/conv_\" + idx;\n    var prefixDepthwiseConv = \"MobilenetV1/Conv2d_\" + idx + \"_depthwise\";\n    var mappedPrefixDepthwiseConv = mappedPrefix + \"/depthwise_conv\";\n    var mappedPrefixPointwiseConv = mappedPrefix + \"/pointwise_conv\";\n    var filters = extractWeightEntry(prefixDepthwiseConv + \"/depthwise_weights\", 4, mappedPrefixDepthwiseConv + \"/filters\");\n    var batch_norm_scale = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/gamma\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_scale\");\n    var batch_norm_offset = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/beta\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_offset\");\n    var batch_norm_mean = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/moving_mean\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_mean\");\n    var batch_norm_variance = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/moving_variance\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_variance\");\n    return {\n      depthwise_conv: {\n        filters: filters,\n        batch_norm_scale: batch_norm_scale,\n        batch_norm_offset: batch_norm_offset,\n        batch_norm_mean: batch_norm_mean,\n        batch_norm_variance: batch_norm_variance\n      },\n      pointwise_conv: extractPointwiseConvParams('MobilenetV1', idx, mappedPrefixPointwiseConv)\n    };\n  }\n\n  function extractMobilenetV1Params() {\n    return {\n      conv_0: extractPointwiseConvParams('MobilenetV1', 0, 'mobilenetv1/conv_0'),\n      conv_1: extractConvPairParams(1),\n      conv_2: extractConvPairParams(2),\n      conv_3: extractConvPairParams(3),\n      conv_4: extractConvPairParams(4),\n      conv_5: extractConvPairParams(5),\n      conv_6: extractConvPairParams(6),\n      conv_7: extractConvPairParams(7),\n      conv_8: extractConvPairParams(8),\n      conv_9: extractConvPairParams(9),\n      conv_10: extractConvPairParams(10),\n      conv_11: extractConvPairParams(11),\n      conv_12: extractConvPairParams(12),\n      conv_13: extractConvPairParams(13)\n    };\n  }\n\n  function extractConvParams(prefix, mappedPrefix) {\n    var filters = extractWeightEntry(prefix + \"/weights\", 4, mappedPrefix + \"/filters\");\n    var bias = extractWeightEntry(prefix + \"/biases\", 1, mappedPrefix + \"/bias\");\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n\n  function extractBoxPredictorParams(idx) {\n    var box_encoding_predictor = extractConvParams(\"Prediction/BoxPredictor_\" + idx + \"/BoxEncodingPredictor\", \"prediction_layer/box_predictor_\" + idx + \"/box_encoding_predictor\");\n    var class_predictor = extractConvParams(\"Prediction/BoxPredictor_\" + idx + \"/ClassPredictor\", \"prediction_layer/box_predictor_\" + idx + \"/class_predictor\");\n    return {\n      box_encoding_predictor: box_encoding_predictor,\n      class_predictor: class_predictor\n    };\n  }\n\n  function extractPredictionLayerParams() {\n    return {\n      conv_0: extractPointwiseConvParams('Prediction', 0, 'prediction_layer/conv_0'),\n      conv_1: extractPointwiseConvParams('Prediction', 1, 'prediction_layer/conv_1'),\n      conv_2: extractPointwiseConvParams('Prediction', 2, 'prediction_layer/conv_2'),\n      conv_3: extractPointwiseConvParams('Prediction', 3, 'prediction_layer/conv_3'),\n      conv_4: extractPointwiseConvParams('Prediction', 4, 'prediction_layer/conv_4'),\n      conv_5: extractPointwiseConvParams('Prediction', 5, 'prediction_layer/conv_5'),\n      conv_6: extractPointwiseConvParams('Prediction', 6, 'prediction_layer/conv_6'),\n      conv_7: extractPointwiseConvParams('Prediction', 7, 'prediction_layer/conv_7'),\n      box_predictor_0: extractBoxPredictorParams(0),\n      box_predictor_1: extractBoxPredictorParams(1),\n      box_predictor_2: extractBoxPredictorParams(2),\n      box_predictor_3: extractBoxPredictorParams(3),\n      box_predictor_4: extractBoxPredictorParams(4),\n      box_predictor_5: extractBoxPredictorParams(5)\n    };\n  }\n\n  return {\n    extractMobilenetV1Params: extractMobilenetV1Params,\n    extractPredictionLayerParams: extractPredictionLayerParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractMobilenetV1Params = _a.extractMobilenetV1Params,\n      extractPredictionLayerParams = _a.extractPredictionLayerParams;\n\n  var extra_dim = weightMap['Output/extra_dim'];\n  paramMappings.push({\n    originalPath: 'Output/extra_dim',\n    paramPath: 'output_layer/extra_dim'\n  });\n\n  if (!isTensor3D(extra_dim)) {\n    throw new Error(\"expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have \" + extra_dim);\n  }\n\n  var params = {\n    mobilenetv1: extractMobilenetV1Params(),\n    prediction_layer: extractPredictionLayerParams(),\n    output_layer: {\n      extra_dim: extra_dim\n    }\n  };\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"mappings":"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","names":["disposeUnusedWeightTensors","extractWeightEntryFactory","isTensor3D","extractorsFactory","weightMap","paramMappings","extractWeightEntry","extractPointwiseConvParams","prefix","idx","mappedPrefix","filters","batch_norm_offset","extractConvPairParams","prefixDepthwiseConv","mappedPrefixDepthwiseConv","mappedPrefixPointwiseConv","batch_norm_scale","batch_norm_mean","batch_norm_variance","depthwise_conv","pointwise_conv","extractMobilenetV1Params","conv_0","conv_1","conv_2","conv_3","conv_4","conv_5","conv_6","conv_7","conv_8","conv_9","conv_10","conv_11","conv_12","conv_13","extractConvParams","bias","extractBoxPredictorParams","box_encoding_predictor","class_predictor","extractPredictionLayerParams","box_predictor_0","box_predictor_1","box_predictor_2","box_predictor_3","box_predictor_4","box_predictor_5","extractParamsFromWeigthMap","extra_dim","push","originalPath","paramPath","Error","params","mobilenetv1","prediction_layer","output_layer"],"sources":["../../../src/ssdMobilenetv1/extractParamsFromWeigthMap.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}