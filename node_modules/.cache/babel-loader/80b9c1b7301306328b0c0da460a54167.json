{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { extractWeightsFactory } from '../common';\nimport { isFloat } from '../utils';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  function extractFilterValues(numFilterValues, numFilters, filterSize) {\n    var weights = extractWeights(numFilterValues);\n    var depth = weights.length / (numFilters * filterSize * filterSize);\n\n    if (isFloat(depth)) {\n      throw new Error(\"depth has to be an integer: \" + depth + \", weights.length: \" + weights.length + \", numFilters: \" + numFilters + \", filterSize: \" + filterSize);\n    }\n\n    return tf.tidy(function () {\n      return tf.transpose(tf.tensor4d(weights, [numFilters, depth, filterSize, filterSize]), [2, 3, 1, 0]);\n    });\n  }\n\n  function extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\n    var filters = extractFilterValues(numFilterValues, numFilters, filterSize);\n    var bias = tf.tensor1d(extractWeights(numFilters));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/filters\"\n    }, {\n      paramPath: mappedPrefix + \"/bias\"\n    });\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n\n  function extractScaleLayerParams(numWeights, mappedPrefix) {\n    var weights = tf.tensor1d(extractWeights(numWeights));\n    var biases = tf.tensor1d(extractWeights(numWeights));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/weights\"\n    }, {\n      paramPath: mappedPrefix + \"/biases\"\n    });\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n\n  function extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\n    var conv = extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv\");\n    var scale = extractScaleLayerParams(numFilters, mappedPrefix + \"/scale\");\n    return {\n      conv: conv,\n      scale: scale\n    };\n  }\n\n  function extractResidualLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix, isDown) {\n    if (isDown === void 0) {\n      isDown = false;\n    }\n\n    var conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv1\");\n    var conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv2\");\n    return {\n      conv1: conv1,\n      conv2: conv2\n    };\n  }\n\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\n\nexport function extractParams(weights) {\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var paramMappings = [];\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractConvLayerParams = _b.extractConvLayerParams,\n      extractResidualLayerParams = _b.extractResidualLayerParams;\n\n  var conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down');\n  var conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1');\n  var conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2');\n  var conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3');\n  var conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true);\n  var conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1');\n  var conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2');\n  var conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3');\n  var conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true);\n  var conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1');\n  var conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2');\n  var conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true);\n  var conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1');\n  var conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2');\n  var conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out');\n  var fc = tf.tidy(function () {\n    return tf.transpose(tf.tensor2d(extractWeights(256 * 128), [128, 256]), [1, 0]);\n  });\n  paramMappings.push({\n    paramPath: \"fc\"\n  });\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"mappings":"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","names":["tf","extractWeightsFactory","isFloat","extractorsFactory","extractWeights","paramMappings","extractFilterValues","numFilterValues","numFilters","filterSize","weights","depth","length","Error","tidy","transpose","tensor4d","extractConvParams","mappedPrefix","filters","bias","tensor1d","push","paramPath","extractScaleLayerParams","numWeights","biases","extractConvLayerParams","conv","scale","extractResidualLayerParams","isDown","conv1","conv2","extractParams","getRemainingWeights","conv32_down","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","fc","tensor2d","params"],"sources":["../../../src/faceRecognitionNet/extractParams.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}