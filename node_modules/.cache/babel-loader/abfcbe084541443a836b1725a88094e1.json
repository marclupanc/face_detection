{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { FaceFeatureExtractor } from '../faceFeatureExtractor/FaceFeatureExtractor';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { FaceExpressions } from './FaceExpressions';\n\nvar FaceExpressionNet =\n/** @class */\nfunction (_super) {\n  __extends(FaceExpressionNet, _super);\n\n  function FaceExpressionNet(faceFeatureExtractor) {\n    if (faceFeatureExtractor === void 0) {\n      faceFeatureExtractor = new FaceFeatureExtractor();\n    }\n\n    return _super.call(this, 'FaceExpressionNet', faceFeatureExtractor) || this;\n  }\n\n  FaceExpressionNet.prototype.forwardInput = function (input) {\n    var _this = this;\n\n    return tf.tidy(function () {\n      return tf.softmax(_this.runNet(input));\n    });\n  };\n\n  FaceExpressionNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  FaceExpressionNet.prototype.predictExpressions = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, out, probabilitesByBatch, predictionsByBatch;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            netInput = _a.sent();\n            return [4\n            /*yield*/\n            , this.forwardInput(netInput)];\n\n          case 2:\n            out = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(tf.unstack(out).map(function (t) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var data;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , t.data()];\n\n                    case 1:\n                      data = _a.sent();\n                      t.dispose();\n                      return [2\n                      /*return*/\n                      , data];\n                  }\n                });\n              });\n            }))];\n\n          case 3:\n            probabilitesByBatch = _a.sent();\n            out.dispose();\n            predictionsByBatch = probabilitesByBatch.map(function (probabilites) {\n              return new FaceExpressions(probabilites);\n            });\n            return [2\n            /*return*/\n            , netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];\n        }\n      });\n    });\n  };\n\n  FaceExpressionNet.prototype.getDefaultModelName = function () {\n    return 'face_expression_model';\n  };\n\n  FaceExpressionNet.prototype.getClassifierChannelsIn = function () {\n    return 256;\n  };\n\n  FaceExpressionNet.prototype.getClassifierChannelsOut = function () {\n    return 7;\n  };\n\n  return FaceExpressionNet;\n}(FaceProcessor);\n\nexport { FaceExpressionNet };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AAEA,SAA8BC,UAA9B,QAAgD,QAAhD;AACA,SAASC,oBAAT,QAAqC,8CAArC;AAEA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAEA;AAAA;AAAA;EAAuCC;;EAErC,2BAAYC,oBAAZ,EAAmF;IAAvE;MAAAA,2BAAiDJ,oBAAjD;IAAuE;;WACjFK,kBAAM,mBAAN,EAA2BD,oBAA3B,KAAgD;EACjD;;EAEME,2CAAP,UAAoBC,KAApB,EAAiD;IAAjD;;IACE,OAAOT,EAAE,CAACU,IAAH,CAAQ;MAAM,SAAE,CAACC,OAAH,CAAWC,KAAI,CAACC,MAAL,CAAYJ,KAAZ,CAAX;IAA8B,CAA5C,CAAP;EACD,CAFM;;EAIMD,sCAAb,UAAqBC,KAArB,EAAqC;;;;;;;YAC5BK,UAAKC,YAAL;YAAkB;YAAA;YAAA,EAAMd,UAAU,CAACQ,KAAD,CAAhB;;;YAAzB;YAAA;YAAA,EAAOK,eAAI,CAAcE,SAAd,CAAJ,CAAP;;;;EACD,CAFY;;EAIAR,iDAAb,UAAgCC,KAAhC,EAAgD;;;;;;;;;YAC7B;YAAA;YAAA,EAAMR,UAAU,CAACQ,KAAD,CAAhB;;;YAAXQ,QAAQ,GAAGH,SAAX;YACM;YAAA;YAAA,EAAM,KAAKC,YAAL,CAAkBE,QAAlB,CAAN;;;YAANC,GAAG,GAAGJ,SAAN;YACsB;YAAA;YAAA,EAAMK,OAAO,CAACC,GAAR,CAAYpB,EAAE,CAACqB,OAAH,CAAWH,GAAX,EAAgBI,GAAhB,CAAoB,UAAMC,CAAN,EAAO;cAAA;;;;;sBAC1D;sBAAA;sBAAA,EAAMA,CAAC,CAACC,IAAF,EAAN;;;sBAAPA,IAAI,GAAGV,SAAP;sBACNS,CAAC,CAACE,OAAF;sBACA;sBAAA;sBAAA,EAAOD,IAAP;;;eAHuE;YAIxE,CAJ6C,CAAZ,CAAN;;;YAAtBE,mBAAmB,GAAGZ,SAAtB;YAKNI,GAAG,CAACO,OAAJ;YAEME,kBAAkB,GAAGD,mBAAmB,CAC3CJ,GADwB,CACpB,wBAAY;cAAI,WAAIlB,eAAJ,CAAoBwB,YAApB;YAAiD,CAD7C,CAArB;YAGN;YAAA;YAAA,EAAOX,QAAQ,CAACY,YAAT,GACHF,kBADG,GAEHA,kBAAkB,CAAC,CAAD,CAFtB;;;;EAGD,CAhBY;;EAkBHnB,kDAAV;IACE,OAAO,uBAAP;EACD,CAFS;;EAIAA,sDAAV;IACE,OAAO,GAAP;EACD,CAFS;;EAIAA,uDAAV;IACE,OAAO,CAAP;EACD,CAFS;;EAGZ;AAAC,CA3CD,CAAuCL,aAAvC","names":["tf","toNetInput","FaceFeatureExtractor","FaceProcessor","FaceExpressions","__extends","faceFeatureExtractor","_super","FaceExpressionNet","input","tidy","softmax","_this","runNet","_a","forwardInput","_b","netInput","out","Promise","all","unstack","map","t","data","dispose","probabilitesByBatch","predictionsByBatch","probabilites","isBatchInput"],"sources":["../../../src/faceExpressionNet/FaceExpressionNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}