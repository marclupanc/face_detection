{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { env } from '../env';\nimport { padToSquare } from '../ops/padToSquare';\nimport { computeReshapedDimensions, isTensor3D, isTensor4D, range } from '../utils';\nimport { createCanvasFromMedia } from './createCanvas';\nimport { imageToSquare } from './imageToSquare';\n\nvar NetInput =\n/** @class */\nfunction () {\n  function NetInput(inputs, treatAsBatchInput) {\n    var _this = this;\n\n    if (treatAsBatchInput === void 0) {\n      treatAsBatchInput = false;\n    }\n\n    this._imageTensors = [];\n    this._canvases = [];\n    this._treatAsBatchInput = false;\n    this._inputDimensions = [];\n\n    if (!Array.isArray(inputs)) {\n      throw new Error(\"NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have \" + inputs);\n    }\n\n    this._treatAsBatchInput = treatAsBatchInput;\n    this._batchSize = inputs.length;\n    inputs.forEach(function (input, idx) {\n      if (isTensor3D(input)) {\n        _this._imageTensors[idx] = input;\n        _this._inputDimensions[idx] = input.shape;\n        return;\n      }\n\n      if (isTensor4D(input)) {\n        var batchSize = input.shape[0];\n\n        if (batchSize !== 1) {\n          throw new Error(\"NetInput - tf.Tensor4D with batchSize \" + batchSize + \" passed, but not supported in input array\");\n        }\n\n        _this._imageTensors[idx] = input;\n        _this._inputDimensions[idx] = input.shape.slice(1);\n        return;\n      }\n\n      var canvas = input instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input);\n      _this._canvases[idx] = canvas;\n      _this._inputDimensions[idx] = [canvas.height, canvas.width, 3];\n    });\n  }\n\n  Object.defineProperty(NetInput.prototype, \"imageTensors\", {\n    get: function () {\n      return this._imageTensors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"canvases\", {\n    get: function () {\n      return this._canvases;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"isBatchInput\", {\n    get: function () {\n      return this.batchSize > 1 || this._treatAsBatchInput;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"batchSize\", {\n    get: function () {\n      return this._batchSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"inputDimensions\", {\n    get: function () {\n      return this._inputDimensions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"inputSize\", {\n    get: function () {\n      return this._inputSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"reshapedInputDimensions\", {\n    get: function () {\n      var _this = this;\n\n      return range(this.batchSize, 0, 1).map(function (_, batchIdx) {\n        return _this.getReshapedInputDimensions(batchIdx);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  NetInput.prototype.getInput = function (batchIdx) {\n    return this.canvases[batchIdx] || this.imageTensors[batchIdx];\n  };\n\n  NetInput.prototype.getInputDimensions = function (batchIdx) {\n    return this._inputDimensions[batchIdx];\n  };\n\n  NetInput.prototype.getInputHeight = function (batchIdx) {\n    return this._inputDimensions[batchIdx][0];\n  };\n\n  NetInput.prototype.getInputWidth = function (batchIdx) {\n    return this._inputDimensions[batchIdx][1];\n  };\n\n  NetInput.prototype.getReshapedInputDimensions = function (batchIdx) {\n    if (typeof this.inputSize !== 'number') {\n      throw new Error('getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet');\n    }\n\n    var width = this.getInputWidth(batchIdx);\n    var height = this.getInputHeight(batchIdx);\n    return computeReshapedDimensions({\n      width: width,\n      height: height\n    }, this.inputSize);\n  };\n  /**\r\n   * Create a batch tensor from all input canvases and tensors\r\n   * with size [batchSize, inputSize, inputSize, 3].\r\n   *\r\n   * @param inputSize Height and width of the tensor.\r\n   * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\r\n   * both sides of the minor dimension oof the image.\r\n   * @returns The batch tensor.\r\n   */\n\n\n  NetInput.prototype.toBatchTensor = function (inputSize, isCenterInputs) {\n    var _this = this;\n\n    if (isCenterInputs === void 0) {\n      isCenterInputs = true;\n    }\n\n    this._inputSize = inputSize;\n    return tf.tidy(function () {\n      var inputTensors = range(_this.batchSize, 0, 1).map(function (batchIdx) {\n        var input = _this.getInput(batchIdx);\n\n        if (input instanceof tf.Tensor) {\n          var imgTensor = isTensor4D(input) ? input : input.expandDims();\n          imgTensor = padToSquare(imgTensor, isCenterInputs);\n\n          if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) {\n            imgTensor = tf.image.resizeBilinear(imgTensor, [inputSize, inputSize]);\n          }\n\n          return imgTensor.as3D(inputSize, inputSize, 3);\n        }\n\n        if (input instanceof env.getEnv().Canvas) {\n          return tf.browser.fromPixels(imageToSquare(input, inputSize, isCenterInputs));\n        }\n\n        throw new Error(\"toBatchTensor - at batchIdx \" + batchIdx + \", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have \" + input);\n      });\n      var batchTensor = tf.stack(inputTensors.map(function (t) {\n        return t.toFloat();\n      })).as4D(_this.batchSize, inputSize, inputSize, 3);\n      return batchTensor;\n    });\n  };\n\n  return NetInput;\n}();\n\nexport { NetInput };","map":{"version":3,"mappings":"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","names":["tf","env","padToSquare","computeReshapedDimensions","isTensor3D","isTensor4D","range","createCanvasFromMedia","imageToSquare","inputs","treatAsBatchInput","Array","isArray","Error","_treatAsBatchInput","_batchSize","length","forEach","input","idx","_this","_imageTensors","_inputDimensions","shape","batchSize","slice","canvas","getEnv","Canvas","_canvases","height","width","Object","NetInput","_inputSize","map","_","batchIdx","getReshapedInputDimensions","canvases","imageTensors","inputSize","getInputWidth","getInputHeight","isCenterInputs","tidy","inputTensors","getInput","Tensor","imgTensor","expandDims","image","resizeBilinear","as3D","browser","fromPixels","batchTensor","stack","toFloat","as4D"],"sources":["../../../src/dom/NetInput.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}