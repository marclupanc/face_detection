{"ast":null,"code":"import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nimport { isTensor2D } from '../utils';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractScaleLayerParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/scale/weights\", 1);\n    var biases = extractWeightEntry(prefix + \"/scale/biases\", 1);\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n\n  function extractConvLayerParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/conv/filters\", 4);\n    var bias = extractWeightEntry(prefix + \"/conv/bias\", 1);\n    var scale = extractScaleLayerParams(prefix);\n    return {\n      conv: {\n        filters: filters,\n        bias: bias\n      },\n      scale: scale\n    };\n  }\n\n  function extractResidualLayerParams(prefix) {\n    return {\n      conv1: extractConvLayerParams(prefix + \"/conv1\"),\n      conv2: extractConvLayerParams(prefix + \"/conv2\")\n    };\n  }\n\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractConvLayerParams = _a.extractConvLayerParams,\n      extractResidualLayerParams = _a.extractResidualLayerParams;\n\n  var conv32_down = extractConvLayerParams('conv32_down');\n  var conv32_1 = extractResidualLayerParams('conv32_1');\n  var conv32_2 = extractResidualLayerParams('conv32_2');\n  var conv32_3 = extractResidualLayerParams('conv32_3');\n  var conv64_down = extractResidualLayerParams('conv64_down');\n  var conv64_1 = extractResidualLayerParams('conv64_1');\n  var conv64_2 = extractResidualLayerParams('conv64_2');\n  var conv64_3 = extractResidualLayerParams('conv64_3');\n  var conv128_down = extractResidualLayerParams('conv128_down');\n  var conv128_1 = extractResidualLayerParams('conv128_1');\n  var conv128_2 = extractResidualLayerParams('conv128_2');\n  var conv256_down = extractResidualLayerParams('conv256_down');\n  var conv256_1 = extractResidualLayerParams('conv256_1');\n  var conv256_2 = extractResidualLayerParams('conv256_2');\n  var conv256_down_out = extractResidualLayerParams('conv256_down_out');\n  var fc = weightMap['fc'];\n  paramMappings.push({\n    originalPath: 'fc',\n    paramPath: 'fc'\n  });\n\n  if (!isTensor2D(fc)) {\n    throw new Error(\"expected weightMap[fc] to be a Tensor2D, instead have \" + fc);\n  }\n\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"mappings":"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","names":["disposeUnusedWeightTensors","extractWeightEntryFactory","isTensor2D","extractorsFactory","weightMap","paramMappings","extractWeightEntry","extractScaleLayerParams","prefix","weights","biases","extractConvLayerParams","filters","bias","scale","conv","extractResidualLayerParams","conv1","conv2","extractParamsFromWeigthMap","conv32_down","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","fc","push","originalPath","paramPath","Error","params"],"sources":["../../../src/faceRecognitionNet/extractParamsFromWeigthMap.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}