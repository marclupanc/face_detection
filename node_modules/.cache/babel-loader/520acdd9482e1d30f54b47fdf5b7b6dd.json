{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { depthwiseSeparableConv } from '../common';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { range } from '../utils';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\n\nfunction conv(x, params, stride) {\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\n}\n\nfunction reductionBlock(x, params, isActivateInput) {\n  if (isActivateInput === void 0) {\n    isActivateInput = true;\n  }\n\n  var out = isActivateInput ? tf.relu(x) : x;\n  out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same');\n  out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\n  return out;\n}\n\nfunction mainBlock(x, params) {\n  var out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1]);\n  out = tf.add(out, x);\n  return out;\n}\n\nvar TinyXception =\n/** @class */\nfunction (_super) {\n  __extends(TinyXception, _super);\n\n  function TinyXception(numMainBlocks) {\n    var _this = _super.call(this, 'TinyXception') || this;\n\n    _this._numMainBlocks = numMainBlocks;\n    return _this;\n  }\n\n  TinyXception.prototype.forwardInput = function (input) {\n    var _this = this;\n\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('TinyXception - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\n      out = reductionBlock(out, params.entry_flow.reduction_block_1);\n      range(_this._numMainBlocks, 0, 1).forEach(function (idx) {\n        out = mainBlock(out, params.middle_flow[\"main_block_\" + idx]);\n      });\n      out = reductionBlock(out, params.exit_flow.reduction_block);\n      out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]));\n      return out;\n    });\n  };\n\n  TinyXception.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  TinyXception.prototype.getDefaultModelName = function () {\n    return 'tiny_xception_model';\n  };\n\n  TinyXception.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap, this._numMainBlocks);\n  };\n\n  TinyXception.prototype.extractParams = function (weights) {\n    return extractParams(weights, this._numMainBlocks);\n  };\n\n  return TinyXception;\n}(NeuralNetwork);\n\nexport { TinyXception };","map":{"version":3,"mappings":"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","names":["tf","depthwiseSeparableConv","toNetInput","NeuralNetwork","normalize","range","extractParams","extractParamsFromWeigthMap","conv","x","params","stride","add","conv2d","filters","bias","reductionBlock","isActivateInput","out","relu","separable_conv0","separable_conv1","maxPool","expansion_conv","mainBlock","separable_conv2","__extends","numMainBlocks","_super","_this","_numMainBlocks","TinyXception","input","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","entry_flow","conv_in","reduction_block_0","reduction_block_1","forEach","idx","middle_flow","exit_flow","reduction_block","separable_conv","_a","forwardInput","_b","weightMap","weights"],"sources":["../../../src/xception/TinyXception.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}