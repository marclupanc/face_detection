{"ast":null,"code":"import { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { resolveInput } from '../dom/resolveInput';\nexport var AnchorPosition;\n\n(function (AnchorPosition) {\n  AnchorPosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\n  AnchorPosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\n  AnchorPosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\n  AnchorPosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\n})(AnchorPosition || (AnchorPosition = {}));\n\nvar DrawTextFieldOptions =\n/** @class */\nfunction () {\n  function DrawTextFieldOptions(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var anchorPosition = options.anchorPosition,\n        backgroundColor = options.backgroundColor,\n        fontColor = options.fontColor,\n        fontSize = options.fontSize,\n        fontStyle = options.fontStyle,\n        padding = options.padding;\n    this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT;\n    this.backgroundColor = backgroundColor || 'rgba(0, 0, 0, 0.5)';\n    this.fontColor = fontColor || 'rgba(255, 255, 255, 1)';\n    this.fontSize = fontSize || 14;\n    this.fontStyle = fontStyle || 'Georgia';\n    this.padding = padding || 4;\n  }\n\n  return DrawTextFieldOptions;\n}();\n\nexport { DrawTextFieldOptions };\n\nvar DrawTextField =\n/** @class */\nfunction () {\n  function DrawTextField(text, anchor, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.text = typeof text === 'string' ? [text] : text instanceof DrawTextField ? text.text : text;\n    this.anchor = anchor;\n    this.options = new DrawTextFieldOptions(options);\n  }\n\n  DrawTextField.prototype.measureWidth = function (ctx) {\n    var padding = this.options.padding;\n    return this.text.map(function (l) {\n      return ctx.measureText(l).width;\n    }).reduce(function (w0, w1) {\n      return w0 < w1 ? w1 : w0;\n    }, 0) + 2 * padding;\n  };\n\n  DrawTextField.prototype.measureHeight = function () {\n    var _a = this.options,\n        fontSize = _a.fontSize,\n        padding = _a.padding;\n    return this.text.length * fontSize + 2 * padding;\n  };\n\n  DrawTextField.prototype.getUpperLeft = function (ctx, canvasDims) {\n    var anchorPosition = this.options.anchorPosition;\n    var isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT;\n    var isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT;\n    var textFieldWidth = this.measureWidth(ctx);\n    var textFieldHeight = this.measureHeight();\n    var x = isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x;\n    var y = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y; // adjust anchor if text box exceeds canvas borders\n\n    if (canvasDims) {\n      var width = canvasDims.width,\n          height = canvasDims.height;\n      var newX = Math.max(Math.min(x, width - textFieldWidth), 0);\n      var newY = Math.max(Math.min(y, height - textFieldHeight), 0);\n      return {\n        x: newX,\n        y: newY\n      };\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  DrawTextField.prototype.draw = function (canvasArg) {\n    var canvas = resolveInput(canvasArg);\n    var ctx = getContext2dOrThrow(canvas);\n    var _a = this.options,\n        backgroundColor = _a.backgroundColor,\n        fontColor = _a.fontColor,\n        fontSize = _a.fontSize,\n        fontStyle = _a.fontStyle,\n        padding = _a.padding;\n    ctx.font = fontSize + \"px \" + fontStyle;\n    var maxTextWidth = this.measureWidth(ctx);\n    var textHeight = this.measureHeight();\n    ctx.fillStyle = backgroundColor;\n    var upperLeft = this.getUpperLeft(ctx, canvas);\n    ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight);\n    ctx.fillStyle = fontColor;\n    this.text.forEach(function (textLine, i) {\n      var x = padding + upperLeft.x;\n      var y = padding + upperLeft.y + (i + 1) * fontSize;\n      ctx.fillText(textLine, x, y);\n    });\n  };\n\n  return DrawTextField;\n}();\n\nexport { DrawTextField };","map":{"version":3,"mappings":"AACA,SAASA,mBAAT,QAAoC,4BAApC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,WAAYC,cAAZ;;AAAA,WAAYA,cAAZ,EAA0B;EACxBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,cAAc,KAAdA,cAAc,MAA1B;;AAgBA;AAAA;AAAA;EAQE,8BAAYC,OAAZ,EAA+C;IAAnC;MAAAA;IAAmC;;IACrC;IAAA,IAAgBC,yCAAhB;IAAA,IAAiCC,6BAAjC;IAAA,IAA4CC,2BAA5C;IAAA,IAAsDC,6BAAtD;IAAA,IAAiEC,yBAAjE;IACR,KAAKC,cAAL,GAAsBA,cAAc,IAAIP,cAAc,CAACQ,QAAvD;IACA,KAAKN,eAAL,GAAuBA,eAAe,IAAI,oBAA1C;IACA,KAAKC,SAAL,GAAiBA,SAAS,IAAI,wBAA9B;IACA,KAAKC,QAAL,GAAgBA,QAAQ,IAAI,EAA5B;IACA,KAAKC,SAAL,GAAiBA,SAAS,IAAI,SAA9B;IACA,KAAKC,OAAL,GAAeA,OAAO,IAAI,CAA1B;EACD;;EACH;AAAC,CAjBD;;;;AAmBA;AAAA;AAAA;EAKE,uBACEG,IADF,EAEEC,MAFF,EAGET,OAHF,EAGqC;IAAnC;MAAAA;IAAmC;;IAEnC,KAAKQ,IAAL,GAAY,OAAOA,IAAP,KAAgB,QAAhB,GACR,CAACA,IAAD,CADQ,GAEPA,IAAI,YAAYE,aAAhB,GAAgCF,IAAI,CAACA,IAArC,GAA4CA,IAFjD;IAGA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKT,OAAL,GAAe,IAAIW,oBAAJ,CAAyBX,OAAzB,CAAf;EACD;;EAEDU,iDAAaE,GAAb,EAA0C;IAChC;IACR,OAAO,KAAKJ,IAAL,CAAUK,GAAV,CAAc,aAAC;MAAI,UAAG,CAACC,WAAJ,CAAgBC,CAAhB,EAAmBC,KAAnB;IAAwB,CAA3C,EAA6CC,MAA7C,CAAoD,UAACC,EAAD,EAAKC,EAAL,EAAO;MAAK,SAAE,GAAGA,EAAL,GAAUA,EAAV,GAAeD,EAAf;IAAiB,CAAjF,EAAmF,CAAnF,IAAyF,IAAIb,OAApG;EACD,CAHD;;EAKAK;IACQ;IAAA,IAAEP,sBAAF;IAAA,IAAYE,oBAAZ;IACN,OAAO,KAAKG,IAAL,CAAUY,MAAV,GAAmBjB,QAAnB,GAA+B,IAAIE,OAA1C;EACD,CAHD;;EAKAK,iDAAaE,GAAb,EAA4CS,UAA5C,EAAoE;IAC1D;IACR,IAAMC,WAAW,GAAGhB,cAAc,KAAKP,cAAc,CAACwB,YAAlC,IAAkDjB,cAAc,KAAKP,cAAc,CAACyB,SAAxG;IACA,IAAMC,UAAU,GAAGnB,cAAc,KAAKP,cAAc,CAAC2B,WAAlC,IAAiDpB,cAAc,KAAKP,cAAc,CAACwB,YAAtG;IAEA,IAAMI,cAAc,GAAG,KAAKC,YAAL,CAAkBhB,GAAlB,CAAvB;IACA,IAAMiB,eAAe,GAAG,KAAKC,aAAL,EAAxB;IACA,IAAMC,CAAC,GAAIT,WAAW,GAAG,KAAKb,MAAL,CAAYsB,CAAZ,GAAgBJ,cAAnB,GAAoC,KAAKlB,MAAL,CAAYsB,CAAtE;IACA,IAAMC,CAAC,GAAGP,UAAU,GAAG,KAAKhB,MAAL,CAAYuB,CAAZ,GAAgBH,eAAnB,GAAqC,KAAKpB,MAAL,CAAYuB,CAArE,CARkE,CAUlE;;IACA,IAAIX,UAAJ,EAAgB;MACN;MAAA,IAAOY,0BAAP;MACR,IAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASN,CAAT,EAAYf,KAAK,GAAGW,cAApB,CAAT,EAA8C,CAA9C,CAAb;MACA,IAAMW,IAAI,GAAGH,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASL,CAAT,EAAYC,MAAM,GAAGJ,eAArB,CAAT,EAAgD,CAAhD,CAAb;MACA,OAAO;QAAEE,CAAC,EAAEG,IAAL;QAAWF,CAAC,EAAEM;MAAd,CAAP;IACD;;IACD,OAAO;MAAEP,CAAC,GAAH;MAAKC,CAAC;IAAN,CAAP;EACD,CAlBD;;EAoBAtB,yCAAK6B,SAAL,EAAqE;IACnE,IAAMC,MAAM,GAAG1C,YAAY,CAACyC,SAAD,CAA3B;IACA,IAAM3B,GAAG,GAAGf,mBAAmB,CAAC2C,MAAD,CAA/B;IAEM;IAAA,IAAEvC,oCAAF;IAAA,IAAmBC,wBAAnB;IAAA,IAA8BC,sBAA9B;IAAA,IAAwCC,wBAAxC;IAAA,IAAmDC,oBAAnD;IAENO,GAAG,CAAC6B,IAAJ,GAActC,QAAQ,QAAR,GAAcC,SAA5B;IACA,IAAMsC,YAAY,GAAG,KAAKd,YAAL,CAAkBhB,GAAlB,CAArB;IACA,IAAM+B,UAAU,GAAG,KAAKb,aAAL,EAAnB;IAEAlB,GAAG,CAACgC,SAAJ,GAAgB3C,eAAhB;IACA,IAAM4C,SAAS,GAAG,KAAKC,YAAL,CAAkBlC,GAAlB,EAAuB4B,MAAvB,CAAlB;IACA5B,GAAG,CAACmC,QAAJ,CAAaF,SAAS,CAACd,CAAvB,EAA0Bc,SAAS,CAACb,CAApC,EAAuCU,YAAvC,EAAqDC,UAArD;IAEA/B,GAAG,CAACgC,SAAJ,GAAgB1C,SAAhB;IACA,KAAKM,IAAL,CAAUwC,OAAV,CAAkB,UAACC,QAAD,EAAWC,CAAX,EAAY;MAC5B,IAAMnB,CAAC,GAAG1B,OAAO,GAAGwC,SAAS,CAACd,CAA9B;MACA,IAAMC,CAAC,GAAG3B,OAAO,GAAGwC,SAAS,CAACb,CAApB,GAAyB,CAACkB,CAAC,GAAG,CAAL,IAAU/C,QAA7C;MACAS,GAAG,CAACuC,QAAJ,CAAaF,QAAb,EAAuBlB,CAAvB,EAA0BC,CAA1B;IACD,CAJD;EAKD,CApBD;;EAqBF;AAAC,CApED","names":["getContext2dOrThrow","resolveInput","AnchorPosition","options","backgroundColor","fontColor","fontSize","fontStyle","padding","anchorPosition","TOP_LEFT","text","anchor","DrawTextField","DrawTextFieldOptions","ctx","map","measureText","l","width","reduce","w0","w1","length","canvasDims","isShiftLeft","BOTTOM_RIGHT","TOP_RIGHT","isShiftTop","BOTTOM_LEFT","textFieldWidth","measureWidth","textFieldHeight","measureHeight","x","y","height","newX","Math","max","min","newY","canvasArg","canvas","font","maxTextWidth","textHeight","fillStyle","upperLeft","getUpperLeft","fillRect","forEach","textLine","i","fillText"],"sources":["../../../src/draw/DrawTextField.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}