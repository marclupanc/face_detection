{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { nonMaxSuppression } from '../ops';\nimport { extractImagePatches } from './extractImagePatches';\nimport { MtcnnBox } from './MtcnnBox';\nimport { RNet } from './RNet';\nexport function stage2(img, inputBoxes, scoreThreshold, params, stats) {\n  return __awaiter(this, void 0, void 0, function () {\n    var ts, rnetInputs, rnetOuts, scoresTensor, scores, _a, _b, indices, filteredBoxes, filteredScores, finalBoxes, finalScores, indicesNms, regions_1;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          ts = Date.now();\n          return [4\n          /*yield*/\n          , extractImagePatches(img, inputBoxes, {\n            width: 24,\n            height: 24\n          })];\n\n        case 1:\n          rnetInputs = _c.sent();\n          stats.stage2_extractImagePatches = Date.now() - ts;\n          ts = Date.now();\n          rnetOuts = rnetInputs.map(function (rnetInput) {\n            var out = RNet(rnetInput, params);\n            rnetInput.dispose();\n            return out;\n          });\n          stats.stage2_rnet = Date.now() - ts;\n          scoresTensor = rnetOuts.length > 1 ? tf.concat(rnetOuts.map(function (out) {\n            return out.scores;\n          })) : rnetOuts[0].scores;\n          _b = (_a = Array).from;\n          return [4\n          /*yield*/\n          , scoresTensor.data()];\n\n        case 2:\n          scores = _b.apply(_a, [_c.sent()]);\n          scoresTensor.dispose();\n          indices = scores.map(function (score, idx) {\n            return {\n              score: score,\n              idx: idx\n            };\n          }).filter(function (c) {\n            return c.score > scoreThreshold;\n          }).map(function (_a) {\n            var idx = _a.idx;\n            return idx;\n          });\n          filteredBoxes = indices.map(function (idx) {\n            return inputBoxes[idx];\n          });\n          filteredScores = indices.map(function (idx) {\n            return scores[idx];\n          });\n          finalBoxes = [];\n          finalScores = [];\n\n          if (filteredBoxes.length > 0) {\n            ts = Date.now();\n            indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7);\n            stats.stage2_nms = Date.now() - ts;\n            regions_1 = indicesNms.map(function (idx) {\n              var regionsData = rnetOuts[indices[idx]].regions.arraySync();\n              return new MtcnnBox(regionsData[0][0], regionsData[0][1], regionsData[0][2], regionsData[0][3]);\n            });\n            finalScores = indicesNms.map(function (idx) {\n              return filteredScores[idx];\n            });\n            finalBoxes = indicesNms.map(function (idx, i) {\n              return filteredBoxes[idx].calibrate(regions_1[i]);\n            });\n          }\n\n          rnetOuts.forEach(function (t) {\n            t.regions.dispose();\n            t.scores.dispose();\n          });\n          return [2\n          /*return*/\n          , {\n            boxes: finalBoxes,\n            scores: finalScores\n          }];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["tf","nonMaxSuppression","extractImagePatches","MtcnnBox","RNet","stage2","img","inputBoxes","scoreThreshold","params","stats","ts","Date","now","width","height","rnetInputs","_c","stage2_extractImagePatches","rnetOuts","map","out","rnetInput","dispose","stage2_rnet","scoresTensor","length","concat","scores","_b","from","data","indices","score","idx","filter","_a","filteredBoxes","filteredScores","finalBoxes","finalScores","indicesNms","stage2_nms","regions_1","regionsData","regions","arraySync","i","calibrate","forEach","t","boxes"],"sources":["../../../src/mtcnn/stage2.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}