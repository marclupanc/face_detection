{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { env } from '../env';\nimport { createCanvas } from './createCanvas';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { imageTensorToCanvas } from './imageTensorToCanvas';\nimport { toNetInput } from './toNetInput';\n/**\r\n * Extracts the image regions containing the detected faces.\r\n *\r\n * @param input The image that face detection has been performed on.\r\n * @param detections The face detection results or face bounding boxes for that image.\r\n * @returns The Canvases of the corresponding image region for each detected face.\r\n */\n\nexport function extractFaces(input, detections) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Canvas, canvas, netInput, tensorOrCanvas, _a, ctx, boxes;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          Canvas = env.getEnv().Canvas;\n          canvas = input;\n          if (!!(input instanceof Canvas)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , toNetInput(input)];\n\n        case 1:\n          netInput = _b.sent();\n\n          if (netInput.batchSize > 1) {\n            throw new Error('extractFaces - batchSize > 1 not supported');\n          }\n\n          tensorOrCanvas = netInput.getInput(0);\n          if (!(tensorOrCanvas instanceof Canvas)) return [3\n          /*break*/\n          , 2];\n          _a = tensorOrCanvas;\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          return [4\n          /*yield*/\n          , imageTensorToCanvas(tensorOrCanvas)];\n\n        case 3:\n          _a = _b.sent();\n          _b.label = 4;\n\n        case 4:\n          canvas = _a;\n          _b.label = 5;\n\n        case 5:\n          ctx = getContext2dOrThrow(canvas);\n          boxes = detections.map(function (det) {\n            return det instanceof FaceDetection ? det.forSize(canvas.width, canvas.height).box.floor() : det;\n          }).map(function (box) {\n            return box.clipAtImageBorders(canvas.width, canvas.height);\n          });\n          return [2\n          /*return*/\n          , boxes.map(function (_a) {\n            var x = _a.x,\n                y = _a.y,\n                width = _a.width,\n                height = _a.height;\n            var faceImg = createCanvas({\n              width: width,\n              height: height\n            });\n            getContext2dOrThrow(faceImg).putImageData(ctx.getImageData(x, y, width, height), 0, 0);\n            return faceImg;\n          })];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,0BAA9B;AAEA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAGA;;;;;;;;AAOA,OAAM,SAAgBC,YAAhB,CACJC,KADI,EAEJC,UAFI,EAEmC;;;;;;;UAG/BC,MAAM,GAAKR,GAAG,CAACS,MAAJ,GAAYD,MAAvB;UAEJE,MAAM,GAAGJ,KAAT;eAEA,EAAEA,KAAK,YAAYE,MAAnB;UAAA;UAAA;UACe;UAAA;UAAA,EAAMJ,UAAU,CAACE,KAAD,CAAhB;;;UAAXK,QAAQ,GAAGC,SAAX;;UAEN,IAAID,QAAQ,CAACE,SAAT,GAAqB,CAAzB,EAA4B;YAC1B,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;UACD;;UAEKC,cAAc,GAAGJ,QAAQ,CAACK,QAAT,CAAkB,CAAlB,CAAjB;gBACGD,cAAc,YAAYP,SAA1B;UAAA;UAAA;UACLS;;;;;;UACA;UAAA;UAAA,EAAMd,mBAAmB,CAACY,cAAD,CAAzB;;;UAAAE;;;;UAFJP,MAAM,KAAN;;;;UAKIQ,GAAG,GAAGhB,mBAAmB,CAACQ,MAAD,CAAzB;UACAS,KAAK,GAAGZ,UAAU,CAACa,GAAX,CACZ,eAAG;YAAI,UAAG,YAAYrB,aAAf,GACHsB,GAAG,CAACC,OAAJ,CAAYZ,MAAM,CAACa,KAAnB,EAA0Bb,MAAM,CAACc,MAAjC,EAAyCC,GAAzC,CAA6CC,KAA7C,EADG,GAEHL,GAFG;UAEA,CAHK,EAKXD,GALW,CAKP,eAAG;YAAI,UAAG,CAACO,kBAAJ,CAAuBjB,MAAM,CAACa,KAA9B,EAAqCb,MAAM,CAACc,MAA5C;UAAmD,CALnD,CAAR;UAON;UAAA;UAAA,EAAOL,KAAK,CAACC,GAAN,CAAU,UAACH,EAAD,EAAwB;gBAArBW;gBAAGC;gBAAGN;gBAAOC;YAC/B,IAAMM,OAAO,GAAG7B,YAAY,CAAC;cAAEsB,KAAK,OAAP;cAASC,MAAM;YAAf,CAAD,CAA5B;YACAtB,mBAAmB,CAAC4B,OAAD,CAAnB,CACGC,YADH,CACgBb,GAAG,CAACc,YAAJ,CAAiBJ,CAAjB,EAAoBC,CAApB,EAAuBN,KAAvB,EAA8BC,MAA9B,CADhB,EACuD,CADvD,EAC0D,CAD1D;YAEA,OAAOM,OAAP;UACD,CALM,CAAP;;;;AAMD","names":["FaceDetection","env","createCanvas","getContext2dOrThrow","imageTensorToCanvas","toNetInput","extractFaces","input","detections","Canvas","getEnv","canvas","netInput","_b","batchSize","Error","tensorOrCanvas","getInput","_a","ctx","boxes","map","det","forSize","width","height","box","floor","clipAtImageBorders","x","y","faceImg","putImageData","getImageData"],"sources":["../../../src/dom/extractFaces.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}