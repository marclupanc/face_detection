{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Point } from '../classes';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { toNetInput } from '../dom';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { isEven } from '../utils';\n\nvar FaceLandmark68NetBase =\n/** @class */\nfunction (_super) {\n  __extends(FaceLandmark68NetBase, _super);\n\n  function FaceLandmark68NetBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FaceLandmark68NetBase.prototype.postProcess = function (output, inputSize, originalDimensions) {\n    var inputDimensions = originalDimensions.map(function (_a) {\n      var width = _a.width,\n          height = _a.height;\n      var scale = inputSize / Math.max(height, width);\n      return {\n        width: width * scale,\n        height: height * scale\n      };\n    });\n    var batchSize = inputDimensions.length;\n    return tf.tidy(function () {\n      var createInterleavedTensor = function (fillX, fillY) {\n        return tf.stack([tf.fill([68], fillX), tf.fill([68], fillY)], 1).as2D(1, 136).as1D();\n      };\n\n      var getPadding = function (batchIdx, cond) {\n        var _a = inputDimensions[batchIdx],\n            width = _a.width,\n            height = _a.height;\n        return cond(width, height) ? Math.abs(width - height) / 2 : 0;\n      };\n\n      var getPaddingX = function (batchIdx) {\n        return getPadding(batchIdx, function (w, h) {\n          return w < h;\n        });\n      };\n\n      var getPaddingY = function (batchIdx) {\n        return getPadding(batchIdx, function (w, h) {\n          return h < w;\n        });\n      };\n\n      var landmarkTensors = output.mul(tf.fill([batchSize, 136], inputSize)).sub(tf.stack(Array.from(Array(batchSize), function (_, batchIdx) {\n        return createInterleavedTensor(getPaddingX(batchIdx), getPaddingY(batchIdx));\n      }))).div(tf.stack(Array.from(Array(batchSize), function (_, batchIdx) {\n        return createInterleavedTensor(inputDimensions[batchIdx].width, inputDimensions[batchIdx].height);\n      })));\n      return landmarkTensors;\n    });\n  };\n\n  FaceLandmark68NetBase.prototype.forwardInput = function (input) {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var out = _this.runNet(input);\n\n      return _this.postProcess(out, input.inputSize, input.inputDimensions.map(function (_a) {\n        var height = _a[0],\n            width = _a[1];\n        return {\n          height: height,\n          width: width\n        };\n      }));\n    });\n  };\n\n  FaceLandmark68NetBase.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  FaceLandmark68NetBase.prototype.detectLandmarks = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, landmarkTensors, landmarksForBatch;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            netInput = _a.sent();\n            landmarkTensors = tf.tidy(function () {\n              return tf.unstack(_this.forwardInput(netInput));\n            });\n            return [4\n            /*yield*/\n            , Promise.all(landmarkTensors.map(function (landmarkTensor, batchIdx) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var landmarksArray, _a, _b, xCoords, yCoords;\n\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      _b = (_a = Array).from;\n                      return [4\n                      /*yield*/\n                      , landmarkTensor.data()];\n\n                    case 1:\n                      landmarksArray = _b.apply(_a, [_c.sent()]);\n                      xCoords = landmarksArray.filter(function (_, i) {\n                        return isEven(i);\n                      });\n                      yCoords = landmarksArray.filter(function (_, i) {\n                        return !isEven(i);\n                      });\n                      return [2\n                      /*return*/\n                      , new FaceLandmarks68(Array(68).fill(0).map(function (_, i) {\n                        return new Point(xCoords[i], yCoords[i]);\n                      }), {\n                        height: netInput.getInputHeight(batchIdx),\n                        width: netInput.getInputWidth(batchIdx)\n                      })];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            landmarksForBatch = _a.sent();\n            landmarkTensors.forEach(function (t) {\n              return t.dispose();\n            });\n            return [2\n            /*return*/\n            , netInput.isBatchInput ? landmarksForBatch : landmarksForBatch[0]];\n        }\n      });\n    });\n  };\n\n  FaceLandmark68NetBase.prototype.getClassifierChannelsOut = function () {\n    return 136;\n  };\n\n  return FaceLandmark68NetBase;\n}(FaceProcessor);\n\nexport { FaceLandmark68NetBase };","map":{"version":3,"mappings":"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","names":["tf","Point","FaceLandmarks68","toNetInput","FaceProcessor","isEven","__extends","FaceLandmark68NetBase","output","inputSize","originalDimensions","inputDimensions","map","_a","width","height","scale","Math","max","batchSize","length","tidy","createInterleavedTensor","fillX","fillY","stack","fill","as2D","as1D","getPadding","batchIdx","cond","abs","getPaddingX","w","h","getPaddingY","landmarkTensors","mul","sub","Array","from","_","div","input","out","_this","runNet","postProcess","forwardInput","_b","netInput","unstack","Promise","all","landmarkTensor","data","landmarksArray","_c","xCoords","filter","i","yCoords","getInputHeight","getInputWidth","landmarksForBatch","forEach","dispose","isBatchInput"],"sources":["../../../src/faceLandmarkNet/FaceLandmark68NetBase.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}