{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isTensor3D, isTensor4D } from '../utils';\nimport { awaitMediaLoaded } from './awaitMediaLoaded';\nimport { isMediaElement } from './isMediaElement';\nimport { NetInput } from './NetInput';\nimport { resolveInput } from './resolveInput';\n/**\r\n * Validates the input to make sure, they are valid net inputs and awaits all media elements\r\n * to be finished loading.\r\n *\r\n * @param input The input, which can be a media element or an array of different media elements.\r\n * @returns A NetInput instance, which can be passed into one of the neural networks.\r\n */\n\nexport function toNetInput(inputs) {\n  return __awaiter(this, void 0, void 0, function () {\n    var inputArgArray, getIdxHint, inputArray;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (inputs instanceof NetInput) {\n            return [2\n            /*return*/\n            , inputs];\n          }\n\n          inputArgArray = Array.isArray(inputs) ? inputs : [inputs];\n\n          if (!inputArgArray.length) {\n            throw new Error('toNetInput - empty array passed as input');\n          }\n\n          getIdxHint = function (idx) {\n            return Array.isArray(inputs) ? \" at input index \" + idx + \":\" : '';\n          };\n\n          inputArray = inputArgArray.map(resolveInput);\n          inputArray.forEach(function (input, i) {\n            if (!isMediaElement(input) && !isTensor3D(input) && !isTensor4D(input)) {\n              if (typeof inputArgArray[i] === 'string') {\n                throw new Error(\"toNetInput -\" + getIdxHint(i) + \" string passed, but could not resolve HTMLElement for element id \" + inputArgArray[i]);\n              }\n\n              throw new Error(\"toNetInput -\" + getIdxHint(i) + \" expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id\");\n            }\n\n            if (isTensor4D(input)) {\n              // if tf.Tensor4D is passed in the input array, the batch size has to be 1\n              var batchSize = input.shape[0];\n\n              if (batchSize !== 1) {\n                throw new Error(\"toNetInput -\" + getIdxHint(i) + \" tf.Tensor4D with batchSize \" + batchSize + \" passed, but not supported in input array\");\n              }\n            }\n          }); // wait for all media elements being loaded\n\n          return [4\n          /*yield*/\n          , Promise.all(inputArray.map(function (input) {\n            return isMediaElement(input) && awaitMediaLoaded(input);\n          }))];\n\n        case 1:\n          // wait for all media elements being loaded\n          _a.sent();\n\n          return [2\n          /*return*/\n          , new NetInput(inputArray, Array.isArray(inputs))];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,UAAvC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAGA;;;;;;;;AAOA,OAAM,SAAgBC,UAAhB,CAA2BC,MAA3B,EAA4C;;;;;;UAChD,IAAIA,MAAM,YAAYH,QAAtB,EAAgC;YAC9B;YAAA;YAAA,EAAOG,MAAP;UACD;;UAEGC,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IACdA,MADc,GAEd,CAACA,MAAD,CAFF;;UAIJ,IAAI,CAACC,aAAa,CAACG,MAAnB,EAA2B;YACzB,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;UACD;;UAEKC,UAAU,GAAG,UAACC,GAAD,EAAY;YAAK,YAAK,CAACJ,OAAN,CAAcH,MAAd,IAAwB,qBAAmBO,GAAnB,GAAsB,GAA9C,GAAoD,EAApD;UAAsD,CAApF;;UAEAC,UAAU,GAAGP,aAAa,CAACQ,GAAd,CAAkBX,YAAlB,CAAb;UAENU,UAAU,CAACE,OAAX,CAAmB,UAACC,KAAD,EAAQC,CAAR,EAAS;YAC1B,IAAI,CAAChB,cAAc,CAACe,KAAD,CAAf,IAA0B,CAAClB,UAAU,CAACkB,KAAD,CAArC,IAAgD,CAACjB,UAAU,CAACiB,KAAD,CAA/D,EAAwE;cAEtE,IAAI,OAAOV,aAAa,CAACW,CAAD,CAApB,KAA4B,QAAhC,EAA0C;gBACxC,MAAM,IAAIP,KAAJ,CAAU,iBAAeC,UAAU,CAACM,CAAD,CAAzB,GAA4B,mEAA5B,GAAgGX,aAAa,CAACW,CAAD,CAAvH,CAAN;cACD;;cAED,MAAM,IAAIP,KAAJ,CAAU,iBAAeC,UAAU,CAACM,CAAD,CAAzB,GAA4B,6HAAtC,CAAN;YACD;;YAED,IAAIlB,UAAU,CAACiB,KAAD,CAAd,EAAuB;cACrB;cACA,IAAME,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAlB;;cACA,IAAID,SAAS,KAAK,CAAlB,EAAqB;gBACnB,MAAM,IAAIR,KAAJ,CAAU,iBAAeC,UAAU,CAACM,CAAD,CAAzB,GAA4B,8BAA5B,GAA2DC,SAA3D,GAAoE,2CAA9E,CAAN;cACD;YACF;UACF,CAjBD,GAmBA;;UACA;UAAA;UAAA,EAAME,OAAO,CAACC,GAAR,CACJR,UAAU,CAACC,GAAX,CAAe,iBAAK;YAAI,qBAAc,CAACE,KAAD,CAAd,IAAyBhB,gBAAgB,CAACgB,KAAD,CAAzC;UAAgD,CAAxE,CADI,CAAN;;;UADA;UACAM;;UAIA;UAAA;UAAA,EAAO,IAAIpB,QAAJ,CAAaW,UAAb,EAAyBN,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAzB,CAAP;;;;AACD","names":["isTensor3D","isTensor4D","awaitMediaLoaded","isMediaElement","NetInput","resolveInput","toNetInput","inputs","inputArgArray","Array","isArray","length","Error","getIdxHint","idx","inputArray","map","forEach","input","i","batchSize","shape","Promise","all","_a"],"sources":["../../../src/dom/toNetInput.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}