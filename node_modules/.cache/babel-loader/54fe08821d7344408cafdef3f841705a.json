{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { BoundingBox, Point } from '../classes';\nimport { nonMaxSuppression } from '../ops';\nimport { CELL_SIZE, CELL_STRIDE } from './config';\nimport { getSizesForScale } from './getSizesForScale';\nimport { MtcnnBox } from './MtcnnBox';\nimport { normalize } from './normalize';\nimport { PNet } from './PNet';\n\nfunction rescaleAndNormalize(x, scale) {\n  return tf.tidy(function () {\n    var _a = getSizesForScale(scale, x.shape.slice(1)),\n        height = _a.height,\n        width = _a.width;\n\n    var resized = tf.image.resizeBilinear(x, [height, width]);\n    var normalized = normalize(resized);\n    return tf.transpose(normalized, [0, 2, 1, 3]);\n  });\n}\n\nfunction extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold) {\n  // TODO: fix this!, maybe better to use tf.gather here\n  var indices = [];\n  var scoresData = scoresTensor.arraySync();\n\n  for (var y = 0; y < scoresTensor.shape[0]; y++) {\n    for (var x = 0; x < scoresTensor.shape[1]; x++) {\n      if (scoresData[y][x] >= scoreThreshold) {\n        indices.push(new Point(x, y));\n      }\n    }\n  }\n\n  var boundingBoxes = indices.map(function (idx) {\n    var cell = new BoundingBox(Math.round((idx.y * CELL_STRIDE + 1) / scale), Math.round((idx.x * CELL_STRIDE + 1) / scale), Math.round((idx.y * CELL_STRIDE + CELL_SIZE) / scale), Math.round((idx.x * CELL_STRIDE + CELL_SIZE) / scale));\n    var score = scoresData[idx.y][idx.x];\n    var regionsData = regionsTensor.arraySync();\n    var region = new MtcnnBox(regionsData[idx.y][idx.x][0], regionsData[idx.y][idx.x][1], regionsData[idx.y][idx.x][2], regionsData[idx.y][idx.x][3]);\n    return {\n      cell: cell,\n      score: score,\n      region: region\n    };\n  });\n  return boundingBoxes;\n}\n\nexport function stage1(imgTensor, scales, scoreThreshold, params, stats) {\n  stats.stage1 = [];\n  var pnetOutputs = scales.map(function (scale) {\n    return tf.tidy(function () {\n      var statsForScale = {\n        scale: scale\n      };\n      var resized = rescaleAndNormalize(imgTensor, scale);\n      var ts = Date.now();\n\n      var _a = PNet(resized, params),\n          prob = _a.prob,\n          regions = _a.regions;\n\n      statsForScale.pnet = Date.now() - ts;\n      var scoresTensor = tf.unstack(tf.unstack(prob, 3)[1])[0];\n      var regionsTensor = tf.unstack(regions)[0];\n      return {\n        scoresTensor: scoresTensor,\n        regionsTensor: regionsTensor,\n        scale: scale,\n        statsForScale: statsForScale\n      };\n    });\n  });\n  var boxesForScale = pnetOutputs.map(function (_a) {\n    var scoresTensor = _a.scoresTensor,\n        regionsTensor = _a.regionsTensor,\n        scale = _a.scale,\n        statsForScale = _a.statsForScale;\n    var boundingBoxes = extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold);\n    scoresTensor.dispose();\n    regionsTensor.dispose();\n\n    if (!boundingBoxes.length) {\n      stats.stage1.push(statsForScale);\n      return [];\n    }\n\n    var ts = Date.now();\n    var indices = nonMaxSuppression(boundingBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), boundingBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.5);\n    statsForScale.nms = Date.now() - ts;\n    statsForScale.numBoxes = indices.length;\n    stats.stage1.push(statsForScale);\n    return indices.map(function (boxIdx) {\n      return boundingBoxes[boxIdx];\n    });\n  });\n  var allBoxes = boxesForScale.reduce(function (all, boxes) {\n    return all.concat(boxes);\n  }, []);\n  var finalBoxes = [];\n  var finalScores = [];\n\n  if (allBoxes.length > 0) {\n    var ts = Date.now();\n    var indices = nonMaxSuppression(allBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), allBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.7);\n    stats.stage1_nms = Date.now() - ts;\n    finalScores = indices.map(function (idx) {\n      return allBoxes[idx].score;\n    });\n    finalBoxes = indices.map(function (idx) {\n      return allBoxes[idx];\n    }).map(function (_a) {\n      var cell = _a.cell,\n          region = _a.region;\n      return new BoundingBox(cell.left + region.left * cell.width, cell.top + region.top * cell.height, cell.right + region.right * cell.width, cell.bottom + region.bottom * cell.height).toSquare().round();\n    });\n  }\n\n  return {\n    boxes: finalBoxes,\n    scores: finalScores\n  };\n}","map":{"version":3,"mappings":"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","names":["tf","BoundingBox","Point","nonMaxSuppression","CELL_SIZE","CELL_STRIDE","getSizesForScale","MtcnnBox","normalize","PNet","rescaleAndNormalize","x","scale","tidy","height","width","resized","image","resizeBilinear","normalized","transpose","extractBoundingBoxes","scoresTensor","regionsTensor","scoreThreshold","indices","scoresData","arraySync","y","shape","push","boundingBoxes","map","cell","Math","round","idx","score","regionsData","region","stage1","imgTensor","scales","params","stats","pnetOutputs","statsForScale","ts","Date","now","prob","regions","pnet","unstack","boxesForScale","_a","dispose","length","nms","numBoxes","boxIdx","allBoxes","reduce","all","boxes","concat","finalBoxes","finalScores","stage1_nms","left","top","right","bottom","toSquare","scores"],"sources":["../../../src/mtcnn/stage1.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}